#version 330
layout (points) in;
layout (triangle_strip, max_vertices = 4) out;


in VS_OUT {
	vec4 clip;
	vec2 size;
	vec2 scale;
	float rotation;
} gs_in[];



out vec2 fClip; // Output to fragment shader




uniform vec2 orthoVec;


void main() {

	//Calculate offset
	vec2 textureSize = gs_in[0].size;

	vec4 transformedPosition = gl_in[0].gl_Position;

	vec4 clip = gs_in[0].clip;


	transformedPosition.x = (transformedPosition.x * orthoVec.x) -1.0;
	transformedPosition.y = 1.0 - ((transformedPosition.y + textureSize.y) * orthoVec.y);

	vec2 transformedSize = textureSize * orthoVec * gs_in[0].scale;




	fClip  = vec2(clip[0],clip[3]);
    gl_Position = transformedPosition + vec4(0.0, 0.0, 0.0, 0.0);
    EmitVertex();

	fClip  = vec2(clip[1],clip[3]);

    gl_Position = transformedPosition + vec4( transformedSize.x, 0.0, 0.0, 0.0);
    EmitVertex();

	fClip  = vec2(clip[0],clip[2]);
	gl_Position = transformedPosition + vec4( 0.0, transformedSize.y, 0.0, 0.0);
    EmitVertex();

	fClip  = vec2(clip[1],clip[2]);
	gl_Position = transformedPosition + vec4( transformedSize.x, transformedSize.y, 0.0, 0.0);
    EmitVertex();

    EndPrimitive();
}
